// A promise has three states: pending, fulfilled, and rejected
// the resolve and reject methods are used to fulfill with 'then' or get an error with 'catch' 

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer represents a response from a server
  let responseFromServer;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

// then is called after the resolve method completes while catch is the method used when your promise 
// has been rejected. It is executed immediately after a promise's reject method is called. Hereâ€™s the syntax:
makeServerRequest.then(result => {console.log(result)});
makeServerRequest.catch(error => {console.log(error)});
makeServerRequest.finally(() => {console.log('settled')});

// If .finally is declared for a promise, it will be executed whenever a promise is settled, irrespective of 
// whether it is fulfilled or rejected

// Promise.prototype.all(iterable) returns a single promise that resolves if
// all of the promises in the iterable argument have resolved
// promisesArray.push(promise1);
promisesArray.push(promise2);
var handleAllPromises = Promise.all(promisesArray);
