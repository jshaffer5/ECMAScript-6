// If you want to export specific pieces of code to reuse in other files, you can use export:

export const add = (x, y) => {
  return x + y;
}
// The above is a common way to export a single function, but you can achieve the same thing like this:

const add = (x, y) => {
  return x + y;
}

export { add };

// When you export a variable or function, you can import it in another file and use it without having to 
// rewrite the code. You can export multiple things by repeating the first example for each thing you want 
// to export, or by placing them all in the export statement of the second example, like this:

export { add, subtract };


// Code can then be imported into the files where you want to use it: 
import { add } from './math_functions.js';
// Here, import will find add in math_functions.js, import just that function for you to use, and ignore the 
// rest. The ./ tells the import to look for the math_functions.js file in the same folder as the current file. 
// The relative file path (./) and file extension (.js) are required when using import in this way.

You can import more than one item from the file by adding them in the import statement like this:

import { add, subtract } from './math_functions.js';

// The export default syntax is noramlly used if only one value is being exported from a file. It is also used to 
// create a fallback value for a file or module.

// Below are examples using export default:

// named function
export default function add(x, y) {
  return x + y;
}

// Note that no curly braces are used when importing a default functions
import add from "./math_functions.js";
